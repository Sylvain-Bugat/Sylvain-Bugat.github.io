<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>8 Queens Puzzle on Batch cavern</title>
    <link>http://sylvain-bugat.github.io/categories/8-queens-puzzle/</link>
    <description>Recent content in 8 Queens Puzzle on Batch cavern</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Apr 2015 23:12:21 +0200</lastBuildDate>
    <atom:link href="http://sylvain-bugat.github.io/categories/8-queens-puzzle/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>8 queens puzzle introduction</title>
      <link>http://sylvain-bugat.github.io/blog/2015/04/28/8-queens-puzzle-introduction/</link>
      <pubDate>Tue, 28 Apr 2015 23:12:21 +0200</pubDate>
      
      <guid>http://sylvain-bugat.github.io/blog/2015/04/28/8-queens-puzzle-introduction/</guid>
      <description>

&lt;p&gt;This post is the first of a article series about the 8/N queens puzzle solving.&lt;/p&gt;

&lt;h2 id=&#34;introduction:2767292a573dc549b9b4297b701af3ab&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;http://en.wikipedia.org/wiki/Eight_queens_puzzle&#34;&gt;8 queens on a chessboard&lt;/a&gt; is a classic puzzle which consists of placing 8 queens on a chessboard with only one queen on each row, column and diagonal, you can try it with this chessboard (errors are not visible yet):&lt;/p&gt;

&lt;p&gt;&lt;div id=&#34;board2&#34; style=&#34;width: 400px&#34;&gt;&lt;/div&gt;
&lt;input type=&#34;button&#34; id=&#34;clearBtn&#34; value=&#34;Clear&#34; /&gt;&lt;/p&gt;

&lt;script&gt;

var board2 = new ChessBoard(&#39;board2&#39;, {
    draggable: true,
    dropOffBoard: &#39;trash&#39;,
    sparePieces: true
});
$(&#39;#startBtn&#39;).on(&#39;click&#39;, board2.start);
$(&#39;#clearBtn&#39;).on(&#39;click&#39;, board2.clear);

&lt;/script&gt;

&lt;p&gt;This base Javascript is from &lt;a href=&#34;http://chessboardjs.com/&#34;&gt;chessboard.js.com&lt;/a&gt; (&lt;a href=&#34;https://github.com/oakmac/chessboardjs/&#34;&gt;GitHub link&lt;/a&gt;) under the &lt;a href=&#34;https://github.com/oakmac/chessboardjs/blob/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;.
Queen image is from &lt;a href=&#34;http://pixabay.com/en/chess-queen-meeple-white-game-36310/&#34;&gt;Pixabay&lt;/a&gt; under the &lt;a href=&#34;http://creativecommons.org/publicdomain/zero/1.0/deed&#34;&gt;CC0 Public Domain&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;extention-to-n-queens:2767292a573dc549b9b4297b701af3ab&#34;&gt;Extention to N queens&lt;/h3&gt;

&lt;p&gt;This puzzle can be extended to N queens on a N x N chessboard and a higher value of N&lt;/p&gt;

&lt;h3 id=&#34;solutions-of-the-puzzle:2767292a573dc549b9b4297b701af3ab&#34;&gt;Solutions of the puzzle&lt;/h3&gt;

&lt;p&gt;Known number of solutions for N from 1 to 26 are:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;N&lt;/th&gt;
&lt;th&gt;number of solutions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;92&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;352&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;724&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;2 680&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;14 200&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;73 712&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;365 596&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;2 279 184&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;14 772 512&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;95 815 104&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;666 090 624&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;4 968 057 848&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;39 029 188 884&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;314 666 222 712&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;2 691 008 701 644&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;24 233 937 684 440&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;227 514 171 973 736&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;2 207 893 435 808 352&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;22 317 699 616 364 044&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Source: sequence &lt;a href=&#34;http://oeis.org/A000170&#34;&gt;A000170&lt;/a&gt; on &lt;a href=&#34;http://oeis.org/&#34;&gt;OEIS&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;resolve-the-puzzle:2767292a573dc549b9b4297b701af3ab&#34;&gt;Resolve the puzzle&lt;/h3&gt;

&lt;p&gt;This puzzle can be solved with various algorithms. It is quite easy to resolve when N is low and it is a good pratice for testing various algorithms and optimisations.&lt;/p&gt;

&lt;p&gt;Next posts will explain greedy and back-tracking algorithms and possible optimisations with some benchmarks to compare. All shown code and algorithms are on this &lt;a href=&#34;https://github.com/Sylvain-Bugat/N-queens-puzzle-solvers&#34;&gt;GitHub project&lt;/a&gt; and are under the &lt;a href=&#34;https://github.com/Sylvain-Bugat/N-queens-puzzle-solvers/blob/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>