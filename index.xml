<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Batch cavern</title>
    <link>http://sylvain-bugat.github.io/</link>
    <description>Recent content on Batch cavern</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 May 2015 12:38:15 +0200</lastBuildDate>
    <atom:link href="http://sylvain-bugat.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>8 queens puzzle brute-force solvers part 1</title>
      <link>http://sylvain-bugat.github.io/blog/2015/05/02/8-queens-puzzle-brute-force-solvers-part-1/</link>
      <pubDate>Sat, 02 May 2015 12:38:15 +0200</pubDate>
      
      <guid>http://sylvain-bugat.github.io/blog/2015/05/02/8-queens-puzzle-brute-force-solvers-part-1/</guid>
      <description>

&lt;h2 id=&#34;explanations:02e494252b7a2aa6ccffd65c467a0932&#34;&gt;Explanations&lt;/h2&gt;

&lt;h3 id=&#34;brute-force:02e494252b7a2aa6ccffd65c467a0932&#34;&gt;Brute-force&lt;/h3&gt;

&lt;p&gt;Brute-force algorithms are also known as exhaustive algorithms, they consist of testing all possibilities with 8 (or more) queens on a chessboard like that for the first one:&lt;/p&gt;

&lt;div id=&#34;board&#34; style=&#34;width: 400px&#34;&gt;&lt;/div&gt;

&lt;script&gt;

var position = {
  a8: &#39;wQ&#39;,
  b8: &#39;wQ&#39;,
  c8: &#39;wQ&#39;,
  d8: &#39;wQ&#39;,
  e8: &#39;wQ&#39;,
  f8: &#39;wQ&#39;,
  g8: &#39;wQ&#39;,
  h8: &#39;wQ&#39;
};
var board = new ChessBoard(&#39;board&#39;, {
    position: position,
    showNotation: false
});

&lt;/script&gt;

&lt;p&gt;In this case a limit of 8 queens is set to end the test and rollback the last placed queen, the next posibility tested will be:&lt;/p&gt;

&lt;div id=&#34;board2&#34; style=&#34;width: 400px&#34;&gt;&lt;/div&gt;

&lt;script&gt;

var position = {
  a8: &#39;wQ&#39;,
  b8: &#39;wQ&#39;,
  c8: &#39;wQ&#39;,
  d8: &#39;wQ&#39;,
  e8: &#39;wQ&#39;,
  f8: &#39;wQ&#39;,
  g8: &#39;wQ&#39;,
  a7: &#39;wQ&#39;
};
var board2 = new ChessBoard(&#39;board2&#39;, {
    position: position,
    showNotation: false
});

&lt;/script&gt;

&lt;p&gt;It is clear that this algorithm is uneficient because the second placed queen is already invalid and next positionned and tested queens are just a waste of time. No solution can be found with 2 queens on the 2 first positions for example.&lt;/p&gt;

&lt;h3 id=&#34;uber-brute-force:02e494252b7a2aa6ccffd65c467a0932&#34;&gt;Uber-brute-force&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s possible to make an algorithm &lt;strong&gt;more uneficient&lt;/strong&gt; with no limit of simultaneous placed queens like this chessboard as the first tested &amp;ldquo;solution&amp;rdquo;:&lt;/p&gt;

&lt;div id=&#34;board3&#34; style=&#34;width: 400px&#34;&gt;&lt;/div&gt;

&lt;script&gt;

var position = {
  a8: &#39;wQ&#39;, b8: &#39;wQ&#39;, c8: &#39;wQ&#39;, d8: &#39;wQ&#39;, e8: &#39;wQ&#39;, f8: &#39;wQ&#39;, g8: &#39;wQ&#39;, h8: &#39;wQ&#39;,
  a7: &#39;wQ&#39;, b7: &#39;wQ&#39;, c7: &#39;wQ&#39;, d7: &#39;wQ&#39;, e7: &#39;wQ&#39;, f7: &#39;wQ&#39;, g7: &#39;wQ&#39;, h7: &#39;wQ&#39;,
  a6: &#39;wQ&#39;, b6: &#39;wQ&#39;, c6: &#39;wQ&#39;, d6: &#39;wQ&#39;, e6: &#39;wQ&#39;, f6: &#39;wQ&#39;, g6: &#39;wQ&#39;, h6: &#39;wQ&#39;,
  a5: &#39;wQ&#39;, b5: &#39;wQ&#39;, c5: &#39;wQ&#39;, d5: &#39;wQ&#39;, e5: &#39;wQ&#39;, f5: &#39;wQ&#39;, g5: &#39;wQ&#39;, h5: &#39;wQ&#39;,
  a4: &#39;wQ&#39;, b4: &#39;wQ&#39;, c4: &#39;wQ&#39;, d4: &#39;wQ&#39;, e4: &#39;wQ&#39;, f4: &#39;wQ&#39;, g4: &#39;wQ&#39;, h4: &#39;wQ&#39;,
  a3: &#39;wQ&#39;, b3: &#39;wQ&#39;, c3: &#39;wQ&#39;, d3: &#39;wQ&#39;, e3: &#39;wQ&#39;, f3: &#39;wQ&#39;, g3: &#39;wQ&#39;, h3: &#39;wQ&#39;,
  a2: &#39;wQ&#39;, b2: &#39;wQ&#39;, c2: &#39;wQ&#39;, d2: &#39;wQ&#39;, e2: &#39;wQ&#39;, f2: &#39;wQ&#39;, g2: &#39;wQ&#39;, h2: &#39;wQ&#39;,
  a1: &#39;wQ&#39;, b1: &#39;wQ&#39;, c1: &#39;wQ&#39;, d1: &#39;wQ&#39;, e1: &#39;wQ&#39;, f1: &#39;wQ&#39;, g1: &#39;wQ&#39;, h1: &#39;wQ&#39;
};
var board3 = new ChessBoard(&#39;board3&#39;, {
    position: position,
    showNotation: false
});

&lt;/script&gt;

&lt;p&gt;This tested chessboard is just insane only a brute-force program can test this as a solution. But this algorithm is a floor value to test speed-ups and optimisations.&lt;/p&gt;

&lt;h2 id=&#34;implementations:02e494252b7a2aa6ccffd65c467a0932&#34;&gt;Implementations&lt;/h2&gt;

&lt;h3 id=&#34;uber-brute-force-1:02e494252b7a2aa6ccffd65c467a0932&#34;&gt;Uber-brute-force&lt;/h3&gt;

&lt;p&gt;This is the slowest implementation I have done to resolve this puzzle:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/** Chessboard represented by a list of lists. */
private final List&amp;lt;List&amp;lt;Boolean&amp;gt;&amp;gt; chessboard;

private void solve(final int x, final int y) {

	// Put a queen on the current position
	chessboard.get(x).set(y, Boolean.TRUE);

	// Test if the chessboard is a solution with exactly N queens
	if (checkSolutionChessboard()) {
		solutionCount++;
		print();
	}
	else {

		//Recursive call to the next position
		final int nextX = (x + 1) % chessboardSize;
		//Switch to the next line
		if (0 == nextX) {

			//End of the chessboard check
			if (y + 1 &amp;lt; chessboardSize) {
				solve(nextX, y + 1);
			}
		}
		else {
			solve(nextX, y);
		}
	}

	// Remove the queen on the current position
	chessboard.get(x).set(y, Boolean.FALSE);

	//Recursive call to the next position
	final int nextX = (x + 1) % chessboardSize;
	//Switch to the next line
	if (0 == nextX) {

		//End of the chessboard check
		if (y + 1 &amp;lt; chessboardSize) {
			solve(nextX, y + 1);
		}
	}
	else {
		solve(nextX, y);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The complete implementation is in this source file &lt;a href=&#34;https://github.com/Sylvain-Bugat/N-queens-puzzle-solvers/blob/master/src/main/java/com/github/sbugat/nqueens/solvers/bruteforce/SlowBruteForceNQueensSolverWithListsNoQueensLimit.java&#34;&gt;SlowBruteForceNQueensSolverWithListsNoQueensLimit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This implementation has a lot of weakness:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The algorithm don&amp;rsquo;t stop after placing N queens&lt;/li&gt;
&lt;li&gt;The solution is checked by analyzing the full chessboard after placing each queen&lt;/li&gt;
&lt;li&gt;The chessboard is represented by list of lists&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first point is a complexity overkill because it greatly increases the number of move required to test all possible solutions on the NxN chessboard. It&amp;rsquo;s a waste of time to test any combination with over N queens, a back-track is needed to test another untested combination.&lt;/p&gt;

&lt;h3 id=&#34;benchmarks:02e494252b7a2aa6ccffd65c467a0932&#34;&gt;Benchmarks&lt;/h3&gt;

&lt;p&gt;These benchmarks are done on a &lt;a href=&#34;http://ark.intel.com/products/52210/Intel-Core-i5-2500K-Processor-6M-Cache-up-to-3_70-GHz&#34;&gt;Core i5 2500K&lt;/a&gt;:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;N&lt;/th&gt;
&lt;th&gt;execution time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4,57 ms&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;2,47 s&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;too long&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;too long&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;brute-force-1:02e494252b7a2aa6ccffd65c467a0932&#34;&gt;Brute-force&lt;/h3&gt;

&lt;p&gt;This is just the previous implementation with a maximum limit of N placed queens at the same time on the chessboard:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void solve(final int x, final int y) {

	// Put a queen on the current position
	chessboard.get(x).set(y, Boolean.TRUE);

	// All queens are sets on the chessboard then a solution may be present
	if (getPlacedQueens() &amp;gt;= chessboardSize) {
		if (checkSolutionChessboard()) {
			solutionCount++;
			print();
		}
	}
	else {

		// Recursive call to the next position
		final int nextX = (x + 1) % chessboardSize;
		// Switch to the next line
		if (0 == nextX) {

			// End of the chessboard check
			if (y + 1 &amp;lt; chessboardSize) {
				solve(nextX, y + 1);
			}
		}
		else {
			solve(nextX, y);
		}
	}

	// Remove the queen on the current position
	chessboard.get(x).set(y, Boolean.FALSE);

	// Recursive call to the next position
	final int nextX = (x + 1) % chessboardSize;
	// Switch to the next line
	if (0 == nextX) {

		// End of the chessboard check
		if (y + 1 &amp;lt; chessboardSize) {
			solve(nextX, y + 1);
		}
	}
	else {
		solve(nextX, y);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The complete implementation is in this source file &lt;a href=&#34;https://github.com/Sylvain-Bugat/N-queens-puzzle-solvers/blob/master/src/main/java/com/github/sbugat/nqueens/solvers/bruteforce/SlowBruteForceNQueensSolverWithLists.java&#34;&gt;SlowBruteForceNQueensSolverWithLists&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This implementation is still very unefficient but is a lot faster because a lot of dead combination are not tested. This optimisation is the first little step to implement a back-tracking algorithm.&lt;/p&gt;

&lt;h3 id=&#34;benchmarks-1:02e494252b7a2aa6ccffd65c467a0932&#34;&gt;Benchmarks&lt;/h3&gt;

&lt;p&gt;These benchmarks are done on a &lt;a href=&#34;http://ark.intel.com/products/52210/Intel-Core-i5-2500K-Processor-6M-Cache-up-to-3_70-GHz&#34;&gt;Core i5 2500K&lt;/a&gt;:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;N&lt;/th&gt;
&lt;th&gt;execution time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;too long&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;next-optimisations:02e494252b7a2aa6ccffd65c467a0932&#34;&gt;Next optimisations?&lt;/h2&gt;

&lt;p&gt;Other optimisations will be tested in the part 2, stay tuned of go to the &lt;a href=&#34;https://github.com/Sylvain-Bugat/N-queens-puzzle-solvers&#34;&gt;GitHub project&lt;/a&gt; to have some algorithms preview!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>http://sylvain-bugat.github.io/about/</link>
      <pubDate>Wed, 29 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://sylvain-bugat.github.io/about/</guid>
      <description>

&lt;p&gt;Hello,&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m currently working as a DevOps for a mobile virtual operator.&lt;/p&gt;

&lt;p&gt;My current open-source projects are on my &lt;a href=&#34;https://github.com/Sylvain-Bugat&#34;&gt;GitHub page&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;contact:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Contact&lt;/h3&gt;

&lt;p&gt;You can contact me directly by &lt;a href=&#34;mailto:Sylvain-Bugat@users.noreply.github.com&#34;&gt;e-mail&lt;/a&gt; or by using &lt;a href=&#34;http://www.linkedin.com/in/sylvainbugat&#34;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>8 queens puzzle introduction</title>
      <link>http://sylvain-bugat.github.io/blog/2015/04/28/8-queens-puzzle-introduction/</link>
      <pubDate>Tue, 28 Apr 2015 23:12:21 +0200</pubDate>
      
      <guid>http://sylvain-bugat.github.io/blog/2015/04/28/8-queens-puzzle-introduction/</guid>
      <description>

&lt;p&gt;This post is the first of a article series about the 8/N queens puzzle solving.&lt;/p&gt;

&lt;h2 id=&#34;introduction:2767292a573dc549b9b4297b701af3ab&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;http://en.wikipedia.org/wiki/Eight_queens_puzzle&#34;&gt;8 queens on a chessboard&lt;/a&gt; is a classic puzzle which consists of placing 8 queens on a chessboard with only one queen on each row, column and diagonal, you can try it with this chessboard (errors are not visible yet):&lt;/p&gt;

&lt;p&gt;&lt;div id=&#34;board&#34; style=&#34;width: 400px&#34;&gt;&lt;/div&gt;
&lt;input type=&#34;button&#34; id=&#34;clearButton&#34; value=&#34;Clear chessboard&#34; /&gt;&lt;/p&gt;

&lt;script&gt;

var board = new ChessBoard(&#39;board&#39;, {
    draggable: true,
    dropOffBoard: &#39;trash&#39;,
    sparePieces: true,
    showNotation: false
});
$(&#39;#clearButton&#39;).on(&#39;click&#39;, board.clear);

&lt;/script&gt;

&lt;p&gt;This base Javascript is from &lt;a href=&#34;http://chessboardjs.com/&#34;&gt;chessboard.js.com&lt;/a&gt; (&lt;a href=&#34;https://github.com/oakmac/chessboardjs/&#34;&gt;GitHub link&lt;/a&gt;) under the &lt;a href=&#34;https://github.com/oakmac/chessboardjs/blob/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;.
Queen image is from &lt;a href=&#34;http://pixabay.com/en/chess-queen-meeple-white-game-36310/&#34;&gt;Pixabay&lt;/a&gt; under the &lt;a href=&#34;http://creativecommons.org/publicdomain/zero/1.0/deed&#34;&gt;CC0 Public Domain&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;extention-to-n-queens:2767292a573dc549b9b4297b701af3ab&#34;&gt;Extention to N queens&lt;/h3&gt;

&lt;p&gt;This puzzle can be extended to N queens on a N x N chessboard and a higher value of N increase needed operations to find all solutions.&lt;/p&gt;

&lt;p&gt;All implemented algorithm in this series of posts can count solutions on a chessboard of size N.&lt;/p&gt;

&lt;h3 id=&#34;solutions-of-the-puzzle:2767292a573dc549b9b4297b701af3ab&#34;&gt;Solutions of the puzzle&lt;/h3&gt;

&lt;p&gt;Known number of solutions for N from 1 to 26 are:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;N&lt;/th&gt;
&lt;th&gt;number of solutions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;92&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;352&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;724&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;2 680&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;14 200&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;73 712&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;365 596&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;2 279 184&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;14 772 512&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;95 815 104&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;666 090 624&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;4 968 057 848&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;39 029 188 884&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;314 666 222 712&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;2 691 008 701 644&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;24 233 937 684 440&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;227 514 171 973 736&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;2 207 893 435 808 352&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;22 317 699 616 364 044&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Source: sequence &lt;a href=&#34;http://oeis.org/A000170&#34;&gt;A000170&lt;/a&gt; on &lt;a href=&#34;http://oeis.org/&#34;&gt;OEIS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On a classic chessboard there is 92 distinct solutions.&lt;/p&gt;

&lt;h2 id=&#34;resolve-the-puzzle:2767292a573dc549b9b4297b701af3ab&#34;&gt;Resolve the puzzle&lt;/h2&gt;

&lt;p&gt;This puzzle can be solved with various algorithms. It is quite easy to resolve when N is low and it is a good pratice for testing various algorithms and optimisations.&lt;/p&gt;

&lt;p&gt;Next posts of this series will explain brute-force and back-tracking algorithms and possible optimisations with some benchmarks to compare. Algorithms will be implemented in &lt;strong&gt;Java&lt;/strong&gt; and all shown code and algorithms are on this &lt;a href=&#34;https://github.com/Sylvain-Bugat/N-queens-puzzle-solvers&#34;&gt;GitHub project&lt;/a&gt; and are under the &lt;a href=&#34;https://github.com/Sylvain-Bugat/N-queens-puzzle-solvers/blob/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;why-implementations-are-in-java:2767292a573dc549b9b4297b701af3ab&#34;&gt;Why implementations are in Java?&lt;/h3&gt;

&lt;p&gt;Java is my main programming language and is very popular.&lt;/p&gt;

&lt;p&gt;Because of the Java runtime machine (JVM) overhead, Java programs can be slower than assembler/compiled languages(C, C++, Go, &amp;hellip;) programs for CPU-bound programs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But a fast Java program is faster than a slow assembler/C program because of algorithm optimisations.&lt;/strong&gt;
Nevertheless a same algortihm implemented in Java and in a optimized compiled language should be executed a faster by the compiled language program in most cases.&lt;/p&gt;

&lt;h3 id=&#34;benchmarks:2767292a573dc549b9b4297b701af3ab&#34;&gt;Benchmarks&lt;/h3&gt;

&lt;p&gt;Benchmarks will be implemented in Java with multiple runs of the same algorithms with the fastest and the slowest runs discarding.&lt;/p&gt;

&lt;p&gt;To compare diferent benchmarks, they need to be run on the same computer at the same time (sequentially), that will be the case in theses posts.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Blog creation with Hugo</title>
      <link>http://sylvain-bugat.github.io/blog/2015/04/26/blog-creation-with-hugo/</link>
      <pubDate>Sun, 26 Apr 2015 19:05:20 +0200</pubDate>
      
      <guid>http://sylvain-bugat.github.io/blog/2015/04/26/blog-creation-with-hugo/</guid>
      <description>

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; is a nice and fast blog (or static sites) creation tools written in &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;installation:370c8eac8167efd517bb2a591c622965&#34;&gt;Installation&lt;/h1&gt;

&lt;p&gt;The installation of Hugo is very simple, you just have to download the package/executable from the &lt;a href=&#34;https://github.com/spf13/hugo/releases/latest&#34;&gt;GitHub lastest release page&lt;/a&gt; and install it or copy it in a directory accessible with the &lt;code&gt;PATH&lt;/code&gt; variable.&lt;/p&gt;

&lt;h3 id=&#34;debian-raspbian:370c8eac8167efd517bb2a591c622965&#34;&gt;Debian/Raspbian&lt;/h3&gt;

&lt;p&gt;On Debian (and Raspbian), &lt;code&gt;deb&lt;/code&gt; packages are available to download for i386, amd64 and armhf. .deb packages are very simple to install with &lt;code&gt;dpkg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Example on Raspbian (Raspberry PI B model) ARM Linux (&lt;strong&gt;take the lastest version if a more recent version is available!&lt;/strong&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://github.com/spf13/hugo/releases/download/v0.13/hugo_0.13_armhf.deb
sudo dpkg -i hugo_0.13_armhf.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it&amp;rsquo;s done, just type &lt;code&gt;hugo version&lt;/code&gt; to test the installation.&lt;/p&gt;

&lt;h3 id=&#34;raw-executable:370c8eac8167efd517bb2a591c622965&#34;&gt;Raw executable&lt;/h3&gt;

&lt;p&gt;On other x64 Linux/UNIX (&lt;strong&gt;take the lastest version if a more recent version is available!&lt;/strong&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#get the hugo tarball
wget https://github.com/spf13/hugo/releases/download/v0.13/hugo_0.13_linux_amd64.tar.gz
tar -xzvf hugo_0.13_linux_amd64.tar.gz

#You can copy the hugo binary somewhere else before adding it to the PATH
cd hugo_0.13_linux_amd64
#A symbolic link or an alias can be defined to use directly hugo by typing &amp;quot;hugo&amp;quot; instead of &amp;quot;hugo_0.13_linux_amd64&amp;quot;
ln -s ln -s hugo_0.13_linux_amd64 hugo
#Temporary PATH export to test only the executable from anywhere
export PATH=&amp;quot;${PATH}:${PWD}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it&amp;rsquo;s done, just type &lt;code&gt;hugo version&lt;/code&gt; to test the installation. You can customize the user account profile to automatically set the &lt;code&gt;PATH&lt;/code&gt; variable.&lt;/p&gt;

&lt;h1 id=&#34;initialize-a-new-site:370c8eac8167efd517bb2a591c622965&#34;&gt;Initialize a new site&lt;/h1&gt;

&lt;p&gt;You can look at the official &lt;a href=&#34;http://gohugo.io/overview/quickstart/&#34;&gt;Hugo quickstart video&lt;/a&gt; to have another example.&lt;/p&gt;

&lt;h3 id=&#34;create-the-site-directories:370c8eac8167efd517bb2a591c622965&#34;&gt;Create the site directories&lt;/h3&gt;

&lt;p&gt;Into the target empty directory use the &lt;code&gt;hugo&lt;/code&gt; command with &lt;code&gt;new site .&lt;/code&gt; arguments to create all&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new site .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The created files and directories are:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;archetypes
config.toml
content
data
layouts
static
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;config.toml&lt;/code&gt; file is the main configuration file and the &lt;code&gt;content&lt;/code&gt; directory will contain site pages.&lt;/p&gt;

&lt;h3 id=&#34;installing-a-theme:370c8eac8167efd517bb2a591c622965&#34;&gt;Installing a theme&lt;/h3&gt;

&lt;p&gt;A least one theme is required to skin the site. Available themes are listed on this dedicated &lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;GitHub project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By using the &lt;code&gt;git&lt;/code&gt; command the [hugo base theme] can be get from the site main directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p themes
cd themes
git clone https://github.com/crakjie/hugo-base-theme.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don&amp;rsquo;t have git installed, just download &lt;a href=&#34;https://github.com/crakjie/hugo-base-theme/archive/master.zip&#34;&gt;the zip archive&lt;/a&gt; from this theme repository and unzip it in your themes sub-directory.&lt;/p&gt;

&lt;h3 id=&#34;installing-all-themes:370c8eac8167efd517bb2a591c622965&#34;&gt;Installing all themes&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s possible to install all themes at once with the &lt;code&gt;git&lt;/code&gt; command from the site main directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recursive https://github.com/spf13/hugoThemes.git themes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All themes can be tested to see which one do you prefer. &lt;strong&gt;Note: some seems partially or totally broken due to Hugo updates?&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;configure-the-site:370c8eac8167efd517bb2a591c622965&#34;&gt;Configure the site&lt;/h3&gt;

&lt;p&gt;The sample configuration file contains:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;baseurl = &amp;quot;http://yourSiteHere/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To configure the installed theme, just add this line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;theme=&amp;quot;hugo-base-theme&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other parameters can be modified as you wish.&lt;/p&gt;

&lt;h3 id=&#34;creating-a-blog-post:370c8eac8167efd517bb2a591c622965&#34;&gt;Creating a blog post&lt;/h3&gt;

&lt;p&gt;From the&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new post/test.md 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will create a &lt;code&gt;test.md&lt;/code&gt; file into the &lt;code&gt;content/post&lt;/code&gt; directory with some header fields:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2015-04-29T23:10:31+02:00&amp;quot;
title = &amp;quot;test&amp;quot;
weight = 5

[menu]
  [menu.main]
    parent = &amp;quot;x&amp;quot;

+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can write a test content like &lt;strong&gt;Your skill is great!&lt;/strong&gt; after this header.&lt;/p&gt;

&lt;h1 id=&#34;test-the-new-site:370c8eac8167efd517bb2a591c622965&#34;&gt;Test the new site&lt;/h1&gt;

&lt;p&gt;Now test the site with this command, &lt;strong&gt;let&amp;rsquo;s rock&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The default server URL is &lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt; and the site must be displayed on your browser.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>License</title>
      <link>http://sylvain-bugat.github.io/license/</link>
      <pubDate>Sun, 26 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://sylvain-bugat.github.io/license/</guid>
      <description>

&lt;h3 id=&#34;content-license:53e892b8b41cc4caece1cfd5ef21d6e7&#34;&gt;Content license&lt;/h3&gt;

&lt;p&gt;All non-code blog content is licensed under &lt;a href=&#34;http://creativecommons.org/licenses/by-nc-sa/3.0/&#34;&gt;Creative Commons BY-NC-SA&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;code-license:53e892b8b41cc4caece1cfd5ef21d6e7&#34;&gt;Code license&lt;/h3&gt;

&lt;p&gt;All source code files and snippets found on this blog, unless otherwise explicitly noted, are licensed under the terms below.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The MIT License (MIT)&lt;/p&gt;

&lt;p&gt;Copyright &amp;copy; 2015 Sylvain Bugat&lt;/p&gt;

&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED &amp;ldquo;AS IS&amp;rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>